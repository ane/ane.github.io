* TODO The Churn                                           :essay:technology:

In light of the *The Churn* expanse novella, explain how technologies
come and go, but in the end the hapless sysadmins and programmers are
the one who have to cope with the changes. 

** Location

A fictional devops-conference, explaining the shiny new thing.

** Technique

A fictional dialogue between a grizzled greybeard, a
frustrated sysadmin, and a young bright-eyed developer.

** Point

The technology itself is irrelevant, since it will change
anyway. Currently software is disposable, so one should accept and
strive to maintain a problem-solving mentality. If your end users want
to upgrade for whimsical reasons, let them; it doesn't ultimately
matter. Just be professional.

* TODO Sometimes, data is all you need                        :software:data:

Explain how, sometimes it's unnecessary to type your data using custom
data structures, when you can use built-in data structures.

https://lobste.rs/s/qfkrce/new_minimalism

Rich Hickey: use data

** Argument

- Passing custom data structures to external interfaces requires
  serialization and deserialization mechanisms.
- Sometimes using plain data structures is enough. In languages that
  have built-in serialization mechanisms, this is a very good idea,
  e.g. Clojure and Go.
- Caveat is that with a strong type system you have a better
  options. OCaml has specialized types and Scala has case classes and
  shapeless, but these introduce their own boilerplate and mystical requirements.
- Perhaps a corollary is to keep your systems simple enough that plain
  data is all you need.
- Another possible outcome is that if your deserializing/serializing
  code isn't automatic, changes in the data means your code has to be
  changed - conversely, in this case relying on a plain hash map saves time.
- Remark: MongoDB and its lack of schemas is the the extreme where
  schema churn is a bad, bad thing.

* Affine types

Show how Rust's type affinity is really cool

